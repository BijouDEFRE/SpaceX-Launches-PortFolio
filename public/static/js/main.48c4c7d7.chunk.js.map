{"version":3,"sources":["Spacex_2.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","query","loading","error","data","console","log","launches","map","key","Component","LAUNCH_QUERY","Launch","this","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,sC,4RCO5B,SAASC,EAAT,GAEX,IAAD,IADCC,OAAUC,EACX,EADWA,cAAeC,EAC1B,EAD0BA,aAAcC,EACxC,EADwCA,kBAAmBC,EAC3D,EAD2DA,eAE1D,OACI,yBAAKC,UAAU,uBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,wCACc,GACV,0BACIA,UAAWC,IAAW,CAClB,eAAgBF,EAChB,eAAgBA,KAGnBF,IAGT,oCAAS,kBAAC,IAAD,CAAQK,OAAO,oBAAoBJ,KAEhD,yBAAKE,UAAU,YACX,kBAAC,IAAD,CAAMG,GAAE,kBAAaP,GAAiBI,UAAU,qBAAhD,qBC1BL,SAASI,IACpB,OACI,yBAAKJ,UAAU,QACX,2BACI,0BAAMA,UAAU,yBADpB,cAGA,2BACI,0BAAMA,UAAU,wBADpB,YCFZ,I,EAAMK,EAAiBC,YAAH,6MAwCLC,EA7Bf,4JACI,WACI,OACI,kBAAC,WAAD,KACI,wBAAIP,UAAU,kBAAd,YACA,kBAACI,EAAD,MACA,kBAAC,IAAD,CAAOI,MAAOH,IAEV,YAA+B,IAA5BI,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACf,OAAGF,EAAgB,2CAChBC,GAAOE,QAAQC,IAAIH,GAGlB,kBAAC,WAAD,KAEQC,EAAKG,SAASC,KAAI,SAAApB,GAAM,OACpB,kBAACD,EAAD,CAAYsB,IAAKrB,EAAOC,cAAeD,OAAQA,iBAhBvF,GAA8BsB,aCTxBC,EAAeZ,YAAH,gcA0FHa,EAvEf,4JACI,WAGI,IAAMvB,EAAkBwB,KAAKC,MAAMC,MAAMC,OAAnC3B,cAGN,OAFAA,EAAgB4B,SAAS5B,GAGrB,kBAAC,WAAD,KACI,kBAAC,IAAD,CAAOY,MAAOU,EAAcO,UAAW,CAAC7B,mBAEhC,YAA+B,IAA5Ba,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACf,GAAIF,EAAS,OAAO,0CAChBC,GAAOE,QAAQC,IAAIH,GAEvB,MAMIC,EAAKhB,OALLE,EADJ,EACIA,aACAD,EAFJ,EAEIA,cACA8B,EAHJ,EAGIA,YACA3B,EAJJ,EAIIA,eAJJ,IAKI4B,OAAUC,EALd,EAKcA,UAAWC,EALzB,EAKyBA,YAAaC,EALtC,EAKsCA,YAGtC,OACI,6BACI,wBAAI9B,UAAU,kBACV,0BAAMA,UAAU,aAAhB,YADJ,IACiDH,GAEjD,wBAAIG,UAAU,QAAd,kBACA,wBAAIA,UAAU,cACV,wBAAIA,UAAU,mBAAd,kBACoBJ,GAEpB,wBAAII,UAAU,mBAAd,gBACkB0B,GAElB,wBAAI1B,UAAU,mBAAd,sBACwB,IACpB,0BACIA,UAAWC,IAAW,CAClB,eAAgBF,EAChB,eAAgBA,KAGnBA,EAAiB,MAAQ,QAKtC,wBAAIC,UAAU,QAAd,kBACA,wBAAIA,UAAU,cACV,wBAAIA,UAAU,mBAAd,cAA4C4B,GAC5C,wBAAI5B,UAAU,mBAAd,gBACkB6B,GAElB,wBAAI7B,UAAU,mBAAd,gBACkB8B,IAGtB,6BACA,kBAAC,IAAD,CAAM3B,GAAG,IAAIH,UAAU,qBAAvB,iBA5DpC,GAA4BiB,a,yBClBtBc,EAAS,IAAIC,IAAa,CAC5BC,IAAK,aAmBMC,MAhBf,WACI,OACI,kBAAC,IAAD,CAAgBH,OAAQA,GACpB,kBAAC,IAAD,KACI,yBAAK/B,UAAU,aACX,yBAAKmC,IAAKC,IAAMC,IAAI,SAASC,MAAO,CAAEC,MAAO,IAAKC,QAAS,OAAQC,OAAQ,UAEvE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrC,IACjC,kBAAC,IAAD,CAAOmC,OAAK,EAACC,KAAK,yBAAyBC,UAAWzB,QCT/D0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.48c4c7d7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Spacex_2.7f13a12b.png\";","import React from 'react';\n// Un utilitaire JavaScript simple pour joindre de manière conditionnelle des noms de classe\nimport classNames from 'classnames';\n// Une bibliothèque de dates JavaScript pour l'analyse, la validation, la manipulation et le formatage des dates\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nexport default function LaunchItem({\n    launch: { flight_number, mission_name, launch_date_local, launch_success }\n}) {\n    return (\n        <div className=\"card card-body mb-3\">\n            <div className=\"row\">\n                <div className=\"col-md-9\">\n                    <h4>\n                        Mission: {''}\n                        <span\n                            className={classNames({\n                                'text-success': launch_success,\n                                'text-danger': !launch_success\n                            })}\n                        >\n                            {mission_name}\n                        </span>\n                    </h4>\n                    <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment></p>\n                </div>\n                <div className=\"col-md-3\">\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\n                </div>\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\n\nexport default function MissionKey() {\n    return (\n        <div className=\"my-3\">\n            <p>\n                <span className=\"px-3 mr-2 bg-success\" /> = Success\n            </p>\n            <p>\n                <span className=\"px-3 mr-2 bg-danger\" /> = Fail\n            </p>\n        </div>\n    );\n};\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\n\nconst LAUNCHES_QUERY = gql`\n    query LaunchesQuery {\n        launches {\n            flight_number\n            mission_name\n            launch_date_local\n            launch_success\n        }\n    }\n`\n\nexport class Launches extends Component {\n    render() {\n        return (\n            <Fragment>\n                <h1 className=\"display-4 my-3\">Launches</h1>\n                <MissionKey />\n                <Query query={LAUNCHES_QUERY}>\n                {\n                    ({ loading, error, data }) => {\n                        if(loading) return <h4>Loading...</h4>\n                        if(error) console.log(error);\n\n                        return (\n                            <Fragment>\n                                {\n                                    data.launches.map(launch => (\n                                        <LaunchItem key={launch.flight_number} launch={launch} />\n                                    ))\n                                }\n                            </Fragment>    \n                        ) \n                    }\n                }\n                </Query>\n            </Fragment>\n        )\n    }\n}\n\nexport default Launches;\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\n// Un utilitaire JavaScript simple pour joindre de manière conditionnelle des noms de classe\nimport classNames from 'classnames';\n\n\nconst LAUNCH_QUERY = gql`\n\n    # Details for launch with flight Number\n    query LaunchQuery($flight_number: Int!) {\n        launch(flight_number: $flight_number) {\n            flight_number\n            mission_name\n            launch_year\n            launch_success\n            launch_date_local\n            rocket {\n                rocket_id\n                rocket_name\n                rocket_type\n            }\n        }\n    }\n`;\n\nexport class Launch extends Component {\n    render() {\n\n        // ici j'utilise le destructuring pour récupérer la variable de la requête\n        let { flight_number } = this.props.match.params;\n        flight_number = parseInt(flight_number);\n\n        return (\n            <Fragment>\n                <Query query={LAUNCH_QUERY} variables={{flight_number}}>\n                    {\n                        ({ loading, error, data }) => {\n                            if (loading) return <h4>Loading...</h4>\n                            if (error) console.log(error);\n\n                            const {\n                                mission_name,\n                                flight_number,\n                                launch_year,\n                                launch_success,\n                                rocket: { rocket_id, rocket_name, rocket_type }\n                            } = data.launch;\n\n                            return (\n                                <div>\n                                    <h1 className=\"display-4 my-3\">\n                                        <span className=\"text-dark\">Mission:</span> {mission_name}\n                                    </h1>\n                                    <h4 className=\"mb-3\">Launch Details</h4>\n                                    <ul className=\"list-group\">\n                                        <li className=\"list-group-item\">\n                                            Flight Number: {flight_number}\n                                        </li>\n                                        <li className=\"list-group-item\">\n                                            Launch Year: {launch_year}\n                                        </li>\n                                        <li className=\"list-group-item\">\n                                            Launch Successful: {' '}\n                                            <span\n                                                className={classNames({\n                                                    'text-success': launch_success,\n                                                    'text-danger': !launch_success\n                                                })}\n                                            >\n                                                {launch_success ? 'Yes' : 'No'}\n                                            </span>\n                                        </li>\n                                    </ul>\n\n                                    <h4 className=\"my-3\">Rocket Details</h4>\n                                    <ul className=\"list-group\">\n                                        <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                                        <li className=\"list-group-item\">\n                                            Rocket Name: {rocket_name}\n                                        </li>\n                                        <li className=\"list-group-item\">\n                                            Rocket Type: {rocket_type}\n                                        </li>\n                                    </ul>\n                                    <hr/>\n                                    <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n                                </div>\n                            )\n                        }\n                    }\n                </Query>\n            </Fragment>\n        );\n    }\n}\n\nexport default Launch;\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport './App.css';\nimport logo from './Spacex_2.png';\n\nconst client = new ApolloClient({\n    uri: '/graphql',\n});\n\nfunction App() {\n    return (\n        <ApolloProvider client={client}>\n            <Router>\n                <div className=\"container\">\n                    <img src={logo} alt=\"SpaceX\" style={{ width: 600, display: 'flex', margin: 'auto' }} />\n\n                        <Route exact path=\"/\" component={Launches} />\n                        <Route exact path=\"/launch/:flight_number\" component={Launch} />\n\n                </div>\n            </Router>\n        </ApolloProvider>\n    );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}